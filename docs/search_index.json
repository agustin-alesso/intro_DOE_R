[
["index.html", "Introducción al diseño y análisis de experimentos usando R Introducción", " Introducción al diseño y análisis de experimentos usando R Agustín Alesso Introducción Este pequeño libro tiene como objetivo servir como material introductorio al diseño y análisis estadístico de experimentos utilizando el software R como soporte para cálculos. Qué cubre? Introducción a R/Rstudio Repaso de estadística básica Principios de diseño Diseǹos más empleados Al final del libro se espera que el lector Reconozca la importancia del enfoque estadístico para el diseño de experimentos. Tenga un sólido entendimiento de los principales métodos utilizados para el análisis de datos provenientes de experimentos diseñados. Desarrolle destrezas mínimas para utilizar el paquete estadístico R y el entorno de trabajo RStudio. Sepa interpretar los resultados de los análisis estadísticos en contexto de las ciencias biológicas y agrícolas. "],
["empezando-con-r-y-rstudio.html", "Capítulo 1 Empezando con R y RStudio 1.1 ¿Qué es R y RStudio? 1.2 ¿Cómo instalar R y RStudio? 1.3 Primera sesión", " Capítulo 1 Empezando con R y RStudio 1.1 ¿Qué es R y RStudio? R es un lenguaje y entorno para el procesamiento, visualización y análisis estadístico de datos. Ha sido creado en 1993 por R. Gentleman y R. Ihaka, ambos científicos del Departamento de Estadística de la Universidad de Auckland (Nueva Zelanda). Actualmente su desarrollo y mantenimiento está a cargo del R Core Team. El sitio oficial del proyecto es www.r-project.org Figure 1.1: Página oficial de R Project Hoy en día, R es la lingua franca del procesamiento y análisis estadístico de datos, tanto en el ámbito académico como comercial dado que es gratiuto, multiplataforma, de código abierto (open source, liberado con licencia GNU/GPL). Esto lo convierte en un software muy potente y que expresa el estado del arte de los métodos estadísticos ya que la comunidad de usuarios contribuya constantemente con funcionalidades e implementaciones de nuevos métodos y técnicas estadísticas. Al igual que su antecesor S, la flexibilidad y potencia de R se basa en su interfaz de comandos (CLI, del inglés command line interface ) que permite la ejecución de comandos de manera interactiva (en consola) o automática mediante scritps. Figure 1.2: Consola o terminal de Windows, Mac OS X y Linux corriendo la última versión estable de R Figure 1.2: Consola o terminal de Windows, Mac OS X y Linux corriendo la última versión estable de R Existen algunos desarrollos de interfases gráficas (GUIs, del inglés graphical user interface), e.g. RCommander, Deducer, que ofrecen la posibilidad de, mediante menues y botones dedicados, ejecutar algunos análisis relativamente simples minimizando la necesidad de escribir código. Figure 1.3: Interfase de R Commander Un enfoque intermedio se obtiene usando los entornos de desarrollo integrados (IDE por sus siglas en inglés integrated development environments) que ofrecen menúes o funciones asistentes que facilitan algunas tareas generales (abrir archivos, carga de datos, exportar gráficos y resultados) pero dejan la codificación del análisis estadístico en manos del usuario mediante la ejecución de scripts. Entre estas alternativas se destaca RStudio ( www.rstudio.com ) el cual también es de código abierto (licencia GNU/GPL), multiplataforma y ofrece una versión gratuita. Figure 1.4: Interfase de RStudio 1.2 ¿Cómo instalar R y RStudio? R y RStudio se instalan por separado. Si bien R puede funcionar sin RStudio, éste necesita que al menos una versión de R esté instalada en el sistema. Ambos softwares son multiplataforma y pueden ser ejecutados en sistemas operativos Windows, OS X y Linux. En la página https://cloud.r-project.org/ hay instrucciones específicas para cada plataforma. A continuación se describe el procedimiento para instalar R y RStudio bajo Windows. 1.2.1 Instalación de R Descargar el archivo instalador correspondiente a la última versión estable de R desde el CRAN1 (del inglés, Comprenhensive R Archive Network) visitando el siguiente link.2 Figure 1.5: Página de descaga de R Una vez finalizada la descarga ejecutar el archivo .exe y seguir el asistente de instalación con todas las opciones por defecto. Si la instalación ha sido exitosa el el menú Inicio &gt; Todos los Programas &gt; R se encontrarán dos accesos directos R i386 3.5.1 y R x64 3.5.1 los cuales permiten correre la interfase de usuario mínima que viene con la versión de R para Windows. Figure 1.6: R GUI para Windows 1.2.2 Instalación de RStudio Ir al sitio web de descarga de RStudio: https://www.rstudio.com/products/rstudio/download/ Figure 1.7: Página principal de RStudio Descargar el archivo de instalación correspondiente a nuestra plataforma o sistema operativo. Por ejemplo: para Windows iniciará la descarga del archivo RStudio-1.1.453.exe Figure 1.8: Página principal de RStudio Una vez finalizada la descarga ejecutar el archivo .exe3 RStudio-1.1.453.exe y seguir el asistente de instalación con todas las opciones por defecto. Si la instalación ha sido exitosa el el menú Inicio &gt; Todos los Programas &gt; RStudio se encontrará el acceso directo a RStudio el cual, mediante el menu contextual (botón derecho del ratón) puede enviarse al Escritorio como acceso directo o bien anclar al menu de Inicio o barra de acceso rápido. Ahora sí, ya tenemos listo R y RStudio para empezar a trabajar!! 1.3 Primera sesión El entorno de trabajo de RStudio se divide en cuatro paneles. El contenido y disposición de los paneles puede personalizarse mediante el menu View &gt; Panes. A continuación la descripción de los paneles por defecto. Figure 1.9: Interfase principal de RStudio Editor. Es donde se editan los scripts que son archivos con los comandos para ejecutar en R. Por defecto este panel no aparece a menos que se cree un nuevo script o se abra uno previamente guardado. Es básicamente un editor de texto plano como el block de notas, aunque tiene algunas funcionalidades importantes: Resaltado sintaxis: mediante colores resalta las funciones, variables, comandos o palabras claves del lenguaje R Sangrado automático: agrega espacios en blanco para mantener la sangría de los bloques de código. Completado automático: muestra sugerencias para completar el comando o argumentos usando la tecla TAB. Console (consola). Es donde reside R propiamente dicho. Allí se ejecutan los comandos y se obtienen las salidas de R. El símbolo es &gt; indica que R está disponible para recibir un comando que puede ser tipeado directamente, o bien enviado desde el editor (1) de scripts usando la combinación CTRL + ENTER o CTRL + R. Environmnet/History/Connections. En la primera pestaña se visualizan los objetos (variables, funciones o datos cargados) que están disponibles en el entorno de R, i.e. en la memoria. En la segunda se puede ver el historial de comandos ingresados o enviados a la consola. La tercera pestaña visualiza las conexiones establecidas con diferentes base de datos. Files/Plots/Packages/Help/Viewer. Allí se puede manejar los archivos del directorio de trabajo, visualizar los gráficos generados en R con posibilidad de exportarlos en varios formatos, administrar los paquetes o complementos, buscar o explorar el manual de ayuda y previsualizar archivos HTML. 1.3.1 Crear un Proyecto Antes de comenzar es conveniente entender el concepto de directorio de trabajo y Proyecto. R trabaja con un directorio de trabajo o working directory que la dirección que figura en el titulo del panel Console. A menos que se especifique lo contrario, se asume que los archivos de entrada o salida se ubican en dicha carpeta. Esto se puede modificar en cualquier momento con la función setwd(). RStudio extiende esta característica a través de los proyectos o projects. De este modo, cada proyecto (una carpeta) contiene un archivo *.RProj el cual contiene información sobre la carpeta de trabajo y algunas configuraciones específicas. Esto permite organizar los archivos de datos, las salidas, los scripts, etc., dentro de un directorio de trabajo (working directory) y volver a ellos de manera más rápida, eficiente, y portable. Para crear un proyecto: Ir a File &gt; New project... o bien el ícono New project. Luego seleccionar New directory y Empty project Una vez en el cuadro de diálogo Create new project. En Directory name ingresar el nombre del proyecto (e.g. DOE) que será a su vez el nombre de la carpeta que RStudio va a crear por nosotros. Luego en Create project as a subdirectory of vamos indicar donde queremos que Rstudio cree la carpeta. Si todo sale bien, se crea la carpeta con el nombre que indicamos y dentro de ésta un archivo con extensión .Rproj 1.3.2 Modo interactivo: la consola La línea de comando o consola es el modo interactivo mediante el cual podemos ejecutar comandos directamente en el intérprete de R. El símbolo &gt; indica que R está disponible esperando una orden. Si la orden no está completa el símbolo se transoforma en +. Por ejemplo: 2 + 2 2 + 2 ## [1] 4 Otro ejemplo: el promedio de los números 1, 3 y 4 (1 + 3 + 4) / 3 ## [1] 2.666667 El simbolo # indica que lo que sigue es un comentario y por lo tanto debe ignorarse # Esto es un comentario 1.3.3 Creación de un script El Editor de Scripts (panel 1) es un editor de texto que está conectado con la consola y gracias a algunas funcionalidades facilitan la edición de código Para crear un nuevo script se puede usar uno de los siguientes métodos: Ir a al menu File &gt; New File &gt; R Script Usar el atajo de teclado CTRL + SHIFT + N Clickear en el primer ícono de la barra de menu Una vez abierto el script en blanco, se pueden empezar a escribir los comandos de R, por ejemplo: # Clásico mensaje &quot;Hola mundo!&quot; &quot;Hola Mundo!&quot; # Calcular el promedio de estos números (1 + 3 + 4) / 3 Para ejecutar estos comandos en la consola hay que posicionarse en la línea o seleccionar las líneas que se quieren ejecutar y luego: Ir al menu Code &gt; Run Selected Line(s) Usar el atajo de teclado CTRL + ENTER o CTRL + R Usar el ícono Run de la barra de herramientas de la pestaña del script Para guardar el script: Ir al menu File &gt; Save Usar el atajo de teclado CTRL + S Usar el ícono con el diskette de la barra de herramientas global o de la pestaña del script activo. 1.3.4 Ayuda!!! Todas las funciones de R y sus paquetes adicionales vienen con documentación completa. Desde la consola se puede acceder usando la función ? seguida del nombre de la función o bien help(&quot;nombre&quot;) # Pedir ayuda de la función mean ?mean help(mean) No obstante, una de las ventajas de RStudio es que dispone de un panel (Panel #4) dedicado a visualizar las páginas de ayuda. Allí se puede navegar por las páginas utilizando los links, realizar búsquedas, etc. Leer la documentación nunca viene mal y generalmente ahorra dolores de cabeza. CRAN se compone de un conjunto de servidores espejo distribuidos alrededor del mundo que tienen copias de R y sus paquetes. No es necesario escojer el espejo más cercano ya que el espejo nube (https://cloud.r-project.org) automáticamente determina de que servidor conviene realizar la descarga.↩ Al momento de escribir estas instrucciones la última versión estable de R era la 3.5.1 “Feather Spray”, por lo tanto el link apuntará al archivo R-3.5.1-win.exe.↩ Al momento de escribir estas instrucciones la última versión estable de RStudio era la 1.1.453 por lo tanto el link apuntará al archivo RStudio-1.1.453.exe.↩ "],
["aspectos-basicos-del-lenguaje-r-domando-a-la-bestia.html", "Capítulo 2 Aspectos básicos del lenguaje R: domando a la bestia 2.1 Operadores matemáticos 2.2 Operadores lógicos 2.3 Variables y objetos 2.4 Funciones y argumentos 2.5 Vectores 2.6 Tipos de datos 2.7 Estructura de datos", " Capítulo 2 Aspectos básicos del lenguaje R: domando a la bestia 2.1 Operadores matemáticos En R las operaciones matemáticas básicas: suma (+), resta (-), división (/), producto (*) y potencia (^) se realizan usando los símbolos convencionales: Por ejemplo, \\(1 + \\left( 3 \\times 4 + \\dfrac{5 -2}{3} \\right)^2\\) en R es: 1 + (3 * 4 + (5 - 2)/3)^2 ## [1] 170 2.2 Operadores lógicos R permite evaluar expresiones lógicas: igual (==), distinto (!=), mayor que (&gt;), menor que (&lt;), mayor o igual que (&gt;=), menor o igual que (&lt;=). El resultado es TRUE (verdadero) o FALSE (falso) # 3 es igual a 4? 3 == 4 ## [1] FALSE # 5 es mayor o igual 3? 5 &gt;= 3 ## [1] TRUE # 2 es distinto que 2.5 2 != 2.5 ## [1] TRUE También se pueden combinar con los operadores intersección (&amp;), unión (|) y negación (!) # Devuelve FALSE ya que las dos condiciones no se cumplen a la vez 4 == 4 &amp; 5 == 6 ## [1] FALSE # Devuelve TRUE ya que una de la dos condiciones se cumple 4 == 4 | 5 == 6 ## [1] TRUE O con operaciones matemáticas… 4 * 2 == 8 ## [1] TRUE En este caso primero evalúa 4 * 2 y luego compara el resultado con 8 2.3 Variables y objetos En R practicamente todo puede almacenarse en un objeto, es decir, un espacio de la memoria asignado a almacenar información: una cifra, un conjunto de números, el resultado de un análisis, etc. También se denomina variables ya que su contenido puede cambiar. Con el simbolo &lt;- o bien = se pueden crear objetos o variables asignándoles información (números, letras, resultados de operaciones, etc) y para luego recuperarla y utilizarla en otros cálculos. # Crea la variable x y le asgina el valor 2 x &lt;- 2 x ## [1] 2 # Operación con variables 2 * x ## [1] 4 # Usar variables para definir nuevas variables y &lt;- 2 * x +1 y ## [1] 5 Aclaración: los nombres de las variables no deben empezar con números ni contener espacios. No pueden usarse operadores en los nombres pero puede usarse . o _. # Mal 2x &lt;- 3 mi variable &lt;- 3 # Bien x_2 &lt;- 3 x.2 &lt;- 3 x2 &lt;- 3 También R es sensibles a mayúsculas # Definir &#39;A&#39; y &#39;a&#39; A &lt;- 3 a &lt;- 5 # Verificar si &#39;A&#39; y &#39;a&#39; son lo mismo A == a ## [1] FALSE 2.4 Funciones y argumentos Las funciones dentro de R tienen la siguiente forma: nombre_funcion(arg1, arg2, ...), donde arg son los argumentos que toma cada función. Algunos argumentos toman valores por defecto otros hay que declararlos. Por ejemplo la función mean() tiene los argumentos: x para indicar el vector numérico sobre el cual queremos calcular el promedio trim para indicar la proporción de valores extremos excluir del cálculo (media truncada) na.rm para indicar si queremos o no excluir los valores NA. # Media truncada de 100 valores aleatorios y &lt;- runif(100) # Indicando los argumentos mean(x = y, trim = 0.1) ## [1] 0.5171936 # Sin indicar los argumentos mean(y, 0.1) ## [1] 0.5171936 En este último caso, el orden de los argumentos es clave ya que R asigna los valores en función de la posición 2.5 Vectores Son los objetos más simples a partir de los cuales se construyen otros tipos de objetos. Se crean utilizando la función c() para “combinar” datos del mismo tipo. x &lt;- c(13, 45, 67, 45) x ## [1] 13 45 67 45 Pueden contener un solo tipo de datos a la vez: numérico, texto, lógico. En el caso de mezcla de datos, R los va a coaccionar al tipo de datos más simple. Por ejemplo: si queremos crear un vector con 3 valores: lógico, numerico y texto, R va a asumir que todos los elementos son de tipo texto x &lt;- c(TRUE, 34, &quot;texto&quot;) x ## [1] &quot;TRUE&quot; &quot;34&quot; &quot;texto&quot; Los vectores están indexados y se puede acceder a sus elementos usando el operador [ ] e indicando el número de orden. Por ejemplo: # 3er elemento del vector x x[3] ## [1] &quot;texto&quot; 2.6 Tipos de datos 2.6.1 Numéricos (numeric) Números racionales (enteros o con coma). Los números enteros se tratan como numeric a menos que se los convierta con as.integer(). x &lt;- c(3, 4, 5) class(x) ## [1] &quot;numeric&quot; # Convertir a enteros y &lt;- as.integer(x) class(y) ## [1] &quot;integer&quot; Los datos numéricos permiten todas las operaciones algebráicas # La media aritmética de x mean(x) ## [1] 4 2.6.2 Texto (character) Cadenas de texto o número delimitadas por comillas (simples o dobles). x &lt;- c(&quot;hola&quot;, &#39;3&#39;, &quot;estadística1&quot;) class(x) ## [1] &quot;character&quot; Lógicamente, no se pueden realizar operaciones numéricas. Se pueden 2.6.3 Lógicos (logic) Condición verdadero (TRUE o T) o falso (FALSE o F) logico &lt;- c(T, F, T, TRUE, FALSE, F) logico ## [1] TRUE FALSE TRUE TRUE FALSE FALSE Ejemplo: ¿que números son mayores a 30? x &lt;- c(23, 43, 21, 34, 56, 3, 23, 3) x &gt; 30 ## [1] FALSE TRUE FALSE TRUE TRUE FALSE FALSE FALSE 2.6.4 Otros Los valores faltantes se simbolizan en R con NA. Indican que debería haber in valor pero que está faltando x &lt;- c(1, 2, 3, NA, 4) is.na(x) ## [1] FALSE FALSE FALSE TRUE FALSE A diferencia del NA, un valor de tipo NULL indica que no hay información y que tampoco se esperaba que la haya. x &lt;- c(1, 2, 3, NULL, 4) x ## [1] 1 2 3 4 Algunas operaciones matemáticas devuelven valores NaN cuando no están definidas, por ejemplo: 0/0 ## [1] NaN O bien valores infinitos: 1/0 ## [1] Inf 2.7 Estructura de datos 2.7.1 Matriz (matrix) Colección de vectores de igual longitud y mismo tipo de datos. Se crea con la función matrix(), o combinando filas o columnas de igual longitud con rbind() o cbind(). M &lt;- matrix(c(1, 2, 3, 4, 5, 6), ncol = 2) M ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 Se puede indexar usando [n, p] donde n es el numero de fila y p numero de columna. # Elemento m12 M[1,2] ## [1] 4 # Toda la columna 2 M[, 2] ## [1] 4 5 6 2.7.2 Listas (list) Generalización de los vectores ya que los elementos pueden ser de igual o diferente tipo de datos l &lt;- list(23, &quot;hola&quot;, TRUE) l ## [[1]] ## [1] 23 ## ## [[2]] ## [1] &quot;hola&quot; ## ## [[3]] ## [1] TRUE Se pueden indexar usando [[ ]] # El segundo elemento de l l[[2]] ## [1] &quot;hola&quot; Cada elemento a su vez puede ser cualquier objeto de los vistos anteriormente. 2.7.3 Hoja de datos (data.frame) Similares a las matrices pero cada columna puede ser de un tipo de dato diferente. Útil para guardar datos donde cada fila es un caso y cada columna una variable. trigo &lt;- data.frame( lote = 1:5, rendimiento = c(34, 36, 40, 28, 31), variedad = c(&#39;Escorpion&#39;, &#39;Escorpion&#39;, &#39;Yarara&#39;, &#39;Baguette 11&#39;, &#39;Tijetera&#39;) ) trigo ## lote rendimiento variedad ## 1 1 34 Escorpion ## 2 2 36 Escorpion ## 3 3 40 Yarara ## 4 4 28 Baguette 11 ## 5 5 31 Tijetera Se puede acceder a cada columna (vectores) con $ # Variedades trigo$variedad ## [1] Escorpion Escorpion Yarara Baguette 11 Tijetera ## Levels: Baguette 11 Escorpion Tijetera Yarara O indexar con indexar con [ ] # El bombre de la varidedad de la fila 2 trigo[2, 3] ## [1] Escorpion ## Levels: Baguette 11 Escorpion Tijetera Yarara # Todos los datos de la fila 2 trigo[2, ] ## lote rendimiento variedad ## 2 2 36 Escorpion # Lotes con rendimiento mayor a 35 qq/ha trigo[trigo$rendimiento &gt; 35, ] ## lote rendimiento variedad ## 2 2 36 Escorpion ## 3 3 40 Yarara 2.7.4 Factores (factor y ordered) Si los elementos de vector de tipo texto (character) representan niveles nominales (categorías), el objeto puede convertirse a factor de modo tal que los valores son reemplazados por un número que se asocia a los niveles del factor (ordenados alfabeticamente, a menos que se indique otra cosa). x &lt;- c(&#39;bajo&#39;, &#39;medio&#39;, &#39;alto&#39;, &#39;alto&#39;, &#39;bajo&#39;, &#39;bajo&#39;) x ## [1] &quot;bajo&quot; &quot;medio&quot; &quot;alto&quot; &quot;alto&quot; &quot;bajo&quot; &quot;bajo&quot; # factor nominal y &lt;- factor(x) y ## [1] bajo medio alto alto bajo bajo ## Levels: alto bajo medio as.numeric(y) ## [1] 2 3 1 1 2 2 En el ejemplo anterior, los valores eran bajo, medio y alto. Mediante la función estos valores pasaron al atributo levels y los datos fueron reemplazados por los identificadores 2, 3, y 1. Cuando los niveles tienen una jerarquía u orden, se puede especificar este tipo de relación mediante as.ordered() que convierte el factor en ordered agregando la relación entre los niveles # Factor ordinal z &lt;- factor(x, levels = c(&#39;bajo&#39;, &#39;medio&#39;, &#39;alto&#39;)) z &lt;- as.ordered(z) z ## [1] bajo medio alto alto bajo bajo ## Levels: bajo &lt; medio &lt; alto Los factores como cualquier vectore tambien se indexan con [ ]. "],
["revision-de-estadistica-basica.html", "Capítulo 3 Revisión de estadística básica", " Capítulo 3 Revisión de estadística básica En este capítulo se revisarán algunos conceptos estadísticos básicos que son fundamentales para el diseño y análisis estadísticod de experimentos "]
]
