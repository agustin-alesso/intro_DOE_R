[
["index.html", "Introducción al diseño y análisis estadístico de experimentos usando R Introducción", " Introducción al diseño y análisis estadístico de experimentos usando R Agustín Alesso Introducción Este pequeño libro tiene como objetivo servir como material introductorio al diseño y análisis estadístico de experimentos utilizando el software R como soporte para cálculos. Qué cubre? Introducción a R/Rstudio Repaso de estadística básica Principios de diseño Diseǹos más empleados Al final del libro se espera que el lector Reconozca la importancia del enfoque estadístico para el diseño de experimentos. Tenga un sólido entendimiento de los principales métodos utilizados para el análisis de datos provenientes de experimentos diseñados. Desarrolle destrezas mínimas para utilizar el paquete estadístico R y el entorno de trabajo RStudio. Sepa interpretar los resultados de los análisis estadísticos en contexto de las ciencias biológicas y agrícolas. "],
["empezando-con-r-y-rstudio.html", "Capítulo 1 Empezando con R y RStudio 1.1 ¿Qué es R y RStudio? 1.2 ¿Cómo instalar R y RStudio? 1.3 Primera sesión", " Capítulo 1 Empezando con R y RStudio 1.1 ¿Qué es R y RStudio? R es un lenguaje y entorno para el procesamiento, visualización y análisis estadístico de datos. Ha sido creado en 1993 por R. Gentleman y R. Ihaka, ambos científicos del Departamento de Estadística de la Universidad de Auckland (Nueva Zelanda). Actualmente su desarrollo y mantenimiento está a cargo del R Core Team. El sitio oficial del proyecto es www.r-project.org Figure 1.1: Página oficial de R Project Hoy en día, R es la lingua franca del procesamiento y análisis de datos, tanto en el ámbito académico como comercial dado que es gratiuto, multiplataforma, de código abierto (open source, liberado con licencia GNU/GPL). Esto y el ecosistema de paquetes contribuidos por la comunidad de usuarios lo convierte en un software muy potente ya que expresa el estado del arte de los métodos estadísticos. Al igual que su antecesor S, la flexibilidad y potencia de R se basa en su interfaz de comandos (CLI, del inglés command line interface ) que permite la ejecución de comandos de manera interactiva (en consola) o estructurada mediante scritps. Figure 1.2: Consola o terminal de Windows, Mac OS X y Linux corriendo la última versión estable de R Figure 1.2: Consola o terminal de Windows, Mac OS X y Linux corriendo la última versión estable de R Existen algunos desarrollos de interfases gráficas (GUIs, del inglés graphical user interface), e.g. RCommander, Deducer, etc., que ofrecen la posibilidad de, mediante menues y botones dedicados, ejecutar algunos análisis relativamente simples minimizando la necesidad de escribir código. Figure 1.3: Interfase de R Commander Los entornos de desarrollo integrados (IDE por sus siglas en inglés integrated development environments) ofrecen un enfoque intermedio ya que los menúes o funciones asistentes facilitan algunas tareas generales (abrir archivos, carga de datos, exportar gráficos y resultados, etc.) pero dejan la codificación y ejecución del análisis estadístico en manos del usuario. Entre estas alternativas se destaca RStudio ( www.rstudio.com ) el cual también es de código abierto (licencia GNU/GPL), multiplataforma y ofrece una versión gratuita. Figure 1.4: Interfase de RStudio 1.2 ¿Cómo instalar R y RStudio? R y RStudio se instalan por separado. R puede funcionar sin RStudio, en cambio éste necesita que al menos una versión de R esté instalada en el sistema. Ambos softwares son multiplataforma y pueden ser ejecutados en sistemas operativos Windows, OS X y Linux. En la página https://cloud.r-project.org/ hay instrucciones específicas para cada plataforma. A continuación se describe el procedimiento para instalar R y RStudio bajo Windows. 1.2.1 Instalación de R Descargar el archivo instalador correspondiente a la última versión estable de R desde el CRAN1 (del inglés, Comprenhensive R Archive Network) visitando el siguiente link. Figure 1.5: Página de descaga de R Ejecutar el archivo descargado2 y seguir el asistente de instalación con todas las opciones por defecto. Si la instalación ha sido exitosa en el menú Inicio podrá encontrarse la carpeta R que contendrá dos accesos directos a la interfase de usuario mínima que viene con la versión de R para Windows. Figure 1.6: R GUI para Windows 1.2.2 Instalación de RStudio Ir al sitio web de descarga de RStudio https://www.rstudio.com/products/rstudio/download/ Figure 1.7: Página principal de RStudio Descargar el archivo de instalación correspondiente a nuestra plataforma o sistema operativo. Figure 1.8: Página principal de RStudio Ejecutar el archivo .exe3 y seguir el asistente de instalación con todas las opciones por defecto. Si la instalación ha sido exitosa en el menú Inicio dentro de la carpeta RStudio se encontrará el acceso directo a RStudio el cual, mediante el menu contextual (botón derecho del ratón) puede enviarse al Escritorio como acceso directo o bien anclar al menu de Inicio o barra de acceso rápido. Ahora sí, ya tenemos listo R y RStudio para empezar a trabajar!! 1.3 Primera sesión El entorno de trabajo de RStudio se divide en cuatro paneles. El contenido y disposición de los paneles puede personalizarse mediante el menu View &gt; Panes. A continuación la descripción de los paneles por defecto. Figure 1.9: Interfase principal de RStudio Editor. Es donde se editan los scripts que son archivos con los comandos para ejecutar en R. Por defecto este panel no aparece a menos que se cree un nuevo script o se abra uno previamente guardado. Es básicamente un editor de texto plano como el block de notas, aunque tiene algunas funcionalidades importantes: Resaltado sintaxis: mediante colores resalta las funciones, variables, comandos o palabras claves del lenguaje R Sangrado automático: agrega espacios en blanco para mantener la sangría de los bloques de código. Completado automático: muestra sugerencias para completar el comando o argumentos usando la tecla TAB. Console (consola). Es donde reside R propiamente dicho. Allí se ejecutan los comandos y se obtienen las salidas de R. El símbolo es &gt; indica que R está disponible para recibir un comando que puede ser tipeado directamente, o bien enviado desde el editor (1) de scripts usando la combinación CTRL + ENTER o CTRL + R. Environmnet/History/Connections. En la primera pestaña se visualizan los objetos (variables, funciones o datos cargados) que están disponibles en el entorno de R, i.e. en la memoria. En la segunda se puede ver el historial de comandos ingresados o enviados a la consola. La tercera pestaña visualiza las conexiones establecidas con diferentes base de datos. Files/Plots/Packages/Help/Viewer. Allí se puede manejar los archivos del directorio de trabajo, visualizar los gráficos generados en R con posibilidad de exportarlos en varios formatos, administrar los paquetes o complementos, buscar o explorar el manual de ayuda y previsualizar archivos HTML. 1.3.1 La consola La línea de comandos o consola es el modo interactivo mediante el cual podemos ejecutar comandos directamente en el intérprete de R. El símbolo o prompt &gt; indica que R está disponible esperando una orden. Si la orden no está completa el símbolo se transforma en +. Por ejemplo: 2 + 2 2 + 2 ## [1] 4 Otro ejemplo: el promedio de los números 1, 3 y 4 (1 + 3 + 4) / 3 ## [1] 2.666667 1.3.2 El script El editor de scripts (panel 1) es un editor de texto plano que está conectado con la consola (panel 2) y, gracias a algunas funcionalidades (resaltado de sinbtaxis, numeración de lineas, plegado de código, autocompletado, etc) facilitan la edición de código para programar los comandos a ejecutar por R. Para crear un nuevo script se puede usar uno de los siguientes métodos: Ir a al menu File &gt; New File &gt; R Script Usar el atajo de teclado CTRL + SHIFT + N Clickear en el primer ícono de la barra de menu Figure 1.10: Barra de herramientas de RStudio Una vez abierto el script en blanco, se pueden empezar a escribir los comandos de R, por ejemplo: # Calcular el promedio de estos números (1 + 3 + 4) / 3 &quot;Hola Mundo!&quot; # Clásico mensaje &quot;Hola mundo!&quot; Para ejecutar estos comandos en la consola hay que posicionarse en la línea o seleccionar las líneas que se quieren ejecutar y luego algunas de las siguientes opciones: Ir al menu Code &gt; Run Selected Line(s) Usar el atajo de teclado CTRL + ENTER o CTRL + R Usar el ícono Run de la barra de herramientas de la pestaña del script Figure 1.11: Barra de herramientas del panel Editor El simbolo # indica que lo que sigue es un comentario y por lo tanto R lo ignora cuando es enviado a la consola. Los comentarios pueden ir solos en una línea separada o bien dentro de una línea que tenga algún comando. Si bien no son necesarios para correr el código, los comentarios son muy útiles para estructurar el script y hacer anotaciones para que otros, o nosotros en un futuro, entiendan lo que hace esa parte del script. Para guardar el script: Ir al menu File &gt; Save o usar el atajo de teclado CTRL + S o bien el ícono con el diskette de la barra de herramientas global o de la pestaña del script activo. Elegir la carpeta destino y el nombre de archivo. Automáticamente se agregará la extensión .R que corresponde a los scripts. 1.3.3 Proyecto R trabaja con un directorio de trabajo o working directory que es la dirección o path que figura en el titulo del panel Console. Por defecto es el directorio base del usuario que depende de cada plataforma. En linux es el /home/usuario en cambio en Windows es C:/Users/usuario/Documents. A menos que se especifique lo contrario, se asume que los archivos de entrada o salida se ubican en dicha carpeta. Esto se puede modificar en cualquier momento con la función setwd(). RStudio extiende esta característica a través de los proyectos o projects. Cada proyecto es una carpeta o folder que contienen un archivo .RProj con algunas configuraciones específicas. Al abrirlo en RStudio, automáticamente se cambia el directorio de trabajo a esta carpeta. Esto permite organizar los archivos de datos, las salidas, los scripts, etc., dentro de un directorio de trabajo (working directory) y volver a ellos de manera más rápida, eficiente, y portable. Para crear un proyecto: Ir a File &gt; New project... o bien el ícono Create project de la barra de herramientas. Seleccionar New Directory y en Project type seleccionar New project. Una vez en el cuadro de diálogo Create new project ingresar el nombre del proyecto (e.g. DOE) en Directory name que será a su vez el nombre de la carpeta que RStudio va a crear por nosotros. Luego en Create project as a subdirectory of indicar donde queremos que Rstudio cree la carpeta. Si todo sale bien, se crea la carpeta con el nombre que indicamos y dentro de ésta un archivo con extensión .Rproj 1.3.4 Ayuda!!! Por último, y no menos importante, R y RStudio cuentan con un completo sistema de ayuda. Desde la consola se puede acceder usando la función ? seguida del nombre de la función o bien help(&quot;nombre&quot;) # Pedir ayuda de la función mean ?mean help(mean) No obstante, una de las ventajas de RStudio es que dispone de un panel (Panel #4) dedicado a visualizar las páginas de ayuda. Allí se puede navegar por las páginas utilizando los links, realizar búsquedas, etc. Leer la documentación nunca viene mal y generalmente ahorra dolores de cabeza. CRAN se compone de un conjunto de servidores espejo distribuidos alrededor del mundo que tienen copias de R y sus paquetes. No es necesario escojer el espejo más cercano ya que el espejo nube (https://cloud.r-project.org) automáticamente determina de que servidor conviene realizar la descarga.↩ Al momento de escribir estas instrucciones la última versión estable de R era la 3.5.1 “Feather Spray”, por lo tanto el link apuntará al archivo R-3.5.1-win.exe.↩ Al momento de escribir estas instrucciones la última versión estable de RStudio era RStudio-1.1.453.exe.↩ "],
["aspectos-basicos-del-lenguaje-r.html", "Capítulo 2 Aspectos básicos del lenguaje R 2.1 Operadores matemáticos 2.2 Operadores lógicos 2.3 Variables y objetos 2.4 Funciones y argumentos 2.5 Vectores 2.6 Tipos de datos 2.7 Estructura de datos", " Capítulo 2 Aspectos básicos del lenguaje R En el capítulo anterior se introdujo la interfase básica de R (la consola) y la edición de secuencias de comandos mediante el uso de scripts. También se mostró la creación y uso de proyectos en RStudio. En este capítulo se abordarán los conceptos básicos del lenguaje R tales como operadores para representar operaciones matemáticas (suma, resta, etc), tipos de variables y objetos para representar los datos, y características generales de las funciones o comandos. 2.1 Operadores matemáticos En R las operaciones matemáticas básicas: suma (+), resta (-), división (/), producto (*) y potencia (^) se realizan usando los símbolos convencionales: Por ejemplo, \\(1 + \\left( 3 \\times 4 + \\dfrac{5 -2}{3} \\right)^2\\) en R es: 1 + (3 * 4 + (5 - 2)/3)^2 ## [1] 170 2.2 Operadores lógicos R permite evaluar expresiones lógicas: igual (==), distinto (!=), mayor que (&gt;), menor que (&lt;), mayor o igual que (&gt;=), menor o igual que (&lt;=). El resultado es TRUE (verdadero) o FALSE (falso) # 3 es igual a 4? 3 == 4 ## [1] FALSE # 5 es mayor o igual 3? 5 &gt;= 3 ## [1] TRUE # 2 es distinto que 2.5 2 != 2.5 ## [1] TRUE También se pueden combinar con los operadores intersección (&amp;), unión (|) y negación (!) # Devuelve FALSE ya que las dos condiciones no se cumplen a la vez 4 == 4 &amp; 5 == 6 ## [1] FALSE # Devuelve TRUE ya que una de la dos condiciones se cumple 4 == 4 | 5 == 6 ## [1] TRUE O con operaciones matemáticas… 4 * 2 == 8 ## [1] TRUE En este caso primero evalúa 4 * 2 y luego compara el resultado con 8 2.3 Variables y objetos En R practicamente todo puede almacenarse en un objeto, es decir, un espacio de la memoria asignado a almacenar información: una cifra, un conjunto de números, el resultado de un análisis, etc. También se denomina variables ya que su contenido puede cambiar. Con el simbolo &lt;- o bien = se pueden crear objetos o variables asignándoles información (números, letras, resultados de operaciones, etc) y para luego recuperarla y utilizarla en otros cálculos. # Crea la variable x y le asgina el valor 2 x &lt;- 2 x ## [1] 2 # Operación con variables 2 * x ## [1] 4 # Usar variables para definir nuevas variables y &lt;- 2 * x +1 y ## [1] 5 Aclaración: los nombres de las variables no deben empezar con números ni contener espacios. No pueden usarse operadores en los nombres pero puede usarse . o _. # Mal 2x &lt;- 3 mi variable &lt;- 3 # Bien x_2 &lt;- 3 x.2 &lt;- 3 x2 &lt;- 3 También R es sensibles a mayúsculas # Definir &#39;A&#39; y &#39;a&#39; A &lt;- 3 a &lt;- 5 # Verificar si &#39;A&#39; y &#39;a&#39; son lo mismo A == a ## [1] FALSE 2.4 Funciones y argumentos Las funciones dentro de R tienen la siguiente forma: nombre_funcion(arg1, arg2, ...), donde arg son los argumentos que toma cada función. Algunos argumentos toman valores por defecto otros hay que declararlos. Por ejemplo la función mean() tiene los argumentos: x para indicar el vector numérico sobre el cual queremos calcular el promedio trim para indicar la proporción de valores extremos excluir del cálculo (media truncada) na.rm para indicar si queremos o no excluir los valores NA. # Media truncada de 100 valores aleatorios y &lt;- runif(100) # Indicando los argumentos mean(x = y, trim = 0.1) ## [1] 0.5241866 # Sin indicar los argumentos mean(y, 0.1) ## [1] 0.5241866 En este último caso, el orden de los argumentos es clave ya que R asigna los valores en función de la posición 2.5 Vectores Son los objetos más simples a partir de los cuales se construyen otros tipos de objetos. Se crean utilizando la función c() para “combinar” datos del mismo tipo. x &lt;- c(13, 45, 67, 45) x ## [1] 13 45 67 45 Pueden contener un solo tipo de datos a la vez: numérico, texto, lógico. En el caso de mezcla de datos, R los va a coaccionar al tipo de datos más simple. Por ejemplo: si queremos crear un vector con 3 valores: lógico, numerico y texto, R va a asumir que todos los elementos son de tipo texto x &lt;- c(TRUE, 34, &quot;texto&quot;) x ## [1] &quot;TRUE&quot; &quot;34&quot; &quot;texto&quot; Los vectores están indexados y se puede acceder a sus elementos usando el operador [ ] e indicando el número de orden. Por ejemplo: # 3er elemento del vector x x[3] ## [1] &quot;texto&quot; 2.6 Tipos de datos 2.6.1 Numéricos (numeric) Números racionales (enteros o con coma). Los números enteros se tratan como numeric a menos que se los convierta con as.integer(). x &lt;- c(3, 4, 5) class(x) ## [1] &quot;numeric&quot; # Convertir a enteros y &lt;- as.integer(x) class(y) ## [1] &quot;integer&quot; Los datos numéricos permiten todas las operaciones algebráicas # La media aritmética de x mean(x) ## [1] 4 2.6.2 Texto (character) Cadenas de texto o número delimitadas por comillas (simples o dobles). x &lt;- c(&quot;hola&quot;, &#39;3&#39;, &quot;estadística1&quot;) class(x) ## [1] &quot;character&quot; Lógicamente, no se pueden realizar operaciones numéricas. Se pueden 2.6.3 Lógicos (logic) Condición verdadero (TRUE o T) o falso (FALSE o F) logico &lt;- c(T, F, T, TRUE, FALSE, F) logico ## [1] TRUE FALSE TRUE TRUE FALSE FALSE Ejemplo: ¿que números son mayores a 30? x &lt;- c(23, 43, 21, 34, 56, 3, 23, 3) x &gt; 30 ## [1] FALSE TRUE FALSE TRUE TRUE FALSE FALSE FALSE 2.6.4 Otros Los valores faltantes se simbolizan en R con NA. Indican que debería haber in valor pero que está faltando x &lt;- c(1, 2, 3, NA, 4) is.na(x) ## [1] FALSE FALSE FALSE TRUE FALSE A diferencia del NA, un valor de tipo NULL indica que no hay información y que tampoco se esperaba que la haya. x &lt;- c(1, 2, 3, NULL, 4) x ## [1] 1 2 3 4 Algunas operaciones matemáticas devuelven valores NaN cuando no están definidas, por ejemplo: 0/0 ## [1] NaN O bien valores infinitos: 1/0 ## [1] Inf 2.7 Estructura de datos 2.7.1 Matriz (matrix) Colección de vectores de igual longitud y mismo tipo de datos. Se crea con la función matrix(), o combinando filas o columnas de igual longitud con rbind() o cbind(). M &lt;- matrix(c(1, 2, 3, 4, 5, 6), ncol = 2) M ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 Se puede indexar usando [n, p] donde n es el numero de fila y p numero de columna. # Elemento m12 M[1,2] ## [1] 4 # Toda la columna 2 M[, 2] ## [1] 4 5 6 2.7.2 Listas (list) Generalización de los vectores ya que los elementos pueden ser de igual o diferente tipo de datos l &lt;- list(23, &quot;hola&quot;, TRUE) l ## [[1]] ## [1] 23 ## ## [[2]] ## [1] &quot;hola&quot; ## ## [[3]] ## [1] TRUE Se pueden indexar usando [[ ]] # El segundo elemento de l l[[2]] ## [1] &quot;hola&quot; Cada elemento a su vez puede ser cualquier objeto de los vistos anteriormente. 2.7.3 Hoja de datos (data.frame) Similares a las matrices pero cada columna puede ser de un tipo de dato diferente. Útil para guardar datos donde cada fila es un caso y cada columna una variable. trigo &lt;- data.frame( lote = 1:5, rendimiento = c(34, 36, 40, 28, 31), variedad = c(&#39;Escorpion&#39;, &#39;Escorpion&#39;, &#39;Yarara&#39;, &#39;Baguette 11&#39;, &#39;Tijetera&#39;) ) trigo ## lote rendimiento variedad ## 1 1 34 Escorpion ## 2 2 36 Escorpion ## 3 3 40 Yarara ## 4 4 28 Baguette 11 ## 5 5 31 Tijetera Se puede acceder a cada columna (vectores) con $ # Variedades trigo$variedad ## [1] Escorpion Escorpion Yarara Baguette 11 Tijetera ## Levels: Baguette 11 Escorpion Tijetera Yarara O indexar con indexar con [ ] # El bombre de la varidedad de la fila 2 trigo[2, 3] ## [1] Escorpion ## Levels: Baguette 11 Escorpion Tijetera Yarara # Todos los datos de la fila 2 trigo[2, ] ## lote rendimiento variedad ## 2 2 36 Escorpion # Lotes con rendimiento mayor a 35 qq/ha trigo[trigo$rendimiento &gt; 35, ] ## lote rendimiento variedad ## 2 2 36 Escorpion ## 3 3 40 Yarara 2.7.4 Factores (factor y ordered) Si los elementos de vector de tipo texto (character) representan niveles nominales (categorías), el objeto puede convertirse a factor de modo tal que los valores son reemplazados por un número que se asocia a los niveles del factor (ordenados alfabeticamente, a menos que se indique otra cosa). x &lt;- c(&#39;bajo&#39;, &#39;medio&#39;, &#39;alto&#39;, &#39;alto&#39;, &#39;bajo&#39;, &#39;bajo&#39;) x ## [1] &quot;bajo&quot; &quot;medio&quot; &quot;alto&quot; &quot;alto&quot; &quot;bajo&quot; &quot;bajo&quot; # factor nominal y &lt;- factor(x) y ## [1] bajo medio alto alto bajo bajo ## Levels: alto bajo medio as.numeric(y) ## [1] 2 3 1 1 2 2 En el ejemplo anterior, los valores eran bajo, medio y alto. Mediante la función estos valores pasaron al atributo levels y los datos fueron reemplazados por los identificadores 2, 3, y 1. Cuando los niveles tienen una jerarquía u orden, se puede especificar este tipo de relación mediante as.ordered() que convierte el factor en ordered agregando la relación entre los niveles # Factor ordinal z &lt;- factor(x, levels = c(&#39;bajo&#39;, &#39;medio&#39;, &#39;alto&#39;)) z &lt;- as.ordered(z) z ## [1] bajo medio alto alto bajo bajo ## Levels: bajo &lt; medio &lt; alto Los factores como cualquier vectore tambien se indexan con [ ]. "],
["introduccion-a-dplyr.html", "Capítulo 3 Introducción a dplyr 3.1 ¿Qué es dplyr? 3.2 ¿Cómo conseguir dplyr? 3.3 Verbos importantes de dplyr para recordar 3.4 dplyr en acción", " Capítulo 3 Introducción a dplyr En este capítulo y el siguiente se introducirán dos paquetes de R que están siendo ampliamente utilizados por la comunidad: dplyr y ggplot2. 3.1 ¿Qué es dplyr? dplyr es un paquete de R muy potente para la exploración, transformación y resumen de datos en formato de tabla con filas (observaciones) y columnas (variables). Es un componente de un conjunto de packages llamado tidyverse desarrollados por Hadley Wickham El paquete contiene un conjunto de funciones (o verbos) que realizan operaciones comunes para el manejo de datos tales como: filtrar filas, seleccionar columnas, re-ordenar filas, agregar o transformar columnas, resumir datos. También permite agrupar los datos facilitando la estrategia split-apply-combine, es decir, dividir (split) los datos según una variable de grupo, aplicar (apply) alguna transformación o resumen y combinar (combine) las partes para presentar los resultados. Si bien R base tiene funciones que realizan las mismas tareas (split(), subset(), apply(), sapply(), lapply(), tapply() and aggregate()), el paquete dplyr brinda una interface más consistente que permite trabajar de manera más facil con data.frame (tabla de datos) más que con vectores. 3.2 ¿Cómo conseguir dplyr? Para instalar por primera vez en la computadora: # Solo install.packages(&quot;dplyr&quot;) # O junto con la familia tidyverse install.packages(&quot;tidyverse&quot;) Lo anterior se debe realizar por única vez si el paquete no está previamente instalado en la máquina. Para usar las funciones en una sesion de trabajo hay que cargarlo con library(): # Solo library(&quot;dplyr&quot;) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union # O junto con la familia tidyverse library(&quot;tidyverse&quot;) ## ── Attaching packages ────── tidyverse 1.2.1 ── ## ✔ ggplot2 3.0.0 ✔ readr 1.1.1 ## ✔ tibble 1.4.2 ✔ purrr 0.2.5 ## ✔ tidyr 0.8.1 ✔ stringr 1.3.1 ## ✔ ggplot2 3.0.0 ✔ forcats 0.3.0 ## ── Conflicts ───────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() R va a avisarnos en la consola que esta enmascarando (reemplazando) algunas funciones que ya estaban en el entorno, o bien el paquete nos devuelve algun mensaje. A menos que diga Error ..., eso está bien. 3.3 Verbos importantes de dplyr para recordar Toda la estrategia de trabajo con datos de dplyr se basa en 6 verbos: verbo descripción select() selecciona columnas (variables) filter() filtra o selecciona las filas (observaciones) arrange() re-ordena las filas mutate() crea nuevas columnas o modifica las preexistentes summarise() resumen los valores de una variable group_by() permite aplicar los verbos anteriores en subgrupos (split-apply-combine) sample_n() para tomar muestras aleatorias con o sin reposición En la mayoría de los casos la sintaxis es: function(que_datos, que_hacer_con_los_datos) En que_datos hay que poner el nombre del set de datos o data.frame (a menos que se use el operador %&gt;% para encadenar, mas adelante) y en que_hacer_con_los_datos indicar que operación, condicion, transformacion, etc aplicar a las filas y columnas. 3.4 dplyr en acción Para ilustrar el uso del paquete vamos a usar los datos contenidos en el archivo pesada_terneros.xlsx. # Cargar los datos con readxl library(readxl) terneros &lt;- read_excel(&quot;./data/pesada_terneros.xlsx&quot;) 3.4.1 Seleccionando variables Una tareas básicas cuando se exploran datos es la selección de columnas de interés (variables). Esto se lleva a cabo con select(). Para seleccionar las columnas Procedencia, IDV y Peso: # Sin asignar select(terneros, Procedencia, IDV, Peso) ## # A tibble: 1,598 x 3 ## Procedencia IDV Peso ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 La Rosita NR047A202 204 ## 2 La Rosita GN685B267 186 ## 3 La Rosita AI101A751 182 ## 4 La Rosita TM603C877 186 ## 5 La Rosita TM420B797 186 ## 6 La Rosita LH837F500 208 ## 7 La Rosita NR047A217 170 ## 8 La Rosita LH837F508 188 ## 9 La Rosita GN685B256 172 ## 10 La Rosita QW110A058 172 ## # ... with 1,588 more rows # Creando un nuevo set de datos mis_columnas &lt;- select(terneros, Procedencia, IDV, Peso) Por defecto, si no se asigna a un nuevo objeto, el resultado de la operación se imprime en la consola con la función print() la cual por defecto muestra las 10 primeras observaciones y la cantidad de columnas que entran en la pantalla. Aquellas columnas que no entran son indicadas al pie. Si quiero ver más registros se puede usar el argumento n = de print() print(mis_columnas, n = 15) ## # A tibble: 1,598 x 3 ## Procedencia IDV Peso ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 La Rosita NR047A202 204 ## 2 La Rosita GN685B267 186 ## 3 La Rosita AI101A751 182 ## 4 La Rosita TM603C877 186 ## 5 La Rosita TM420B797 186 ## 6 La Rosita LH837F500 208 ## 7 La Rosita NR047A217 170 ## 8 La Rosita LH837F508 188 ## 9 La Rosita GN685B256 172 ## 10 La Rosita QW110A058 172 ## 11 La Rosita LH837F497 188 ## 12 La Rosita TM420B803 180 ## 13 La Rosita LH837F514 198 ## 14 La Rosita II641B940 200 ## 15 La Rosita IY735C 242 ## # ... with 1,583 more rows Con n = &quot;all&quot; se imprimen todas (no se muestra por razones obvias) El orden en que aparecen las variables en el resultado es el orden que se utilizó al seleccionarlas. # El orden altera el producto select(terneros, Procedencia, IDV, Peso) ## # A tibble: 1,598 x 3 ## Procedencia IDV Peso ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 La Rosita NR047A202 204 ## 2 La Rosita GN685B267 186 ## 3 La Rosita AI101A751 182 ## 4 La Rosita TM603C877 186 ## 5 La Rosita TM420B797 186 ## 6 La Rosita LH837F500 208 ## 7 La Rosita NR047A217 170 ## 8 La Rosita LH837F508 188 ## 9 La Rosita GN685B256 172 ## 10 La Rosita QW110A058 172 ## # ... with 1,588 more rows También se puede usar los comnados starts_with(), ends_with(), contains(), etc (ver ?select_helpers) para más opciones). Para elegir varias columnas que tienen un patron sin tener que tipear todos los nombres. # Selecciona columnas que empiezan con P select(terneros, starts_with(&quot;P&quot;)) ## # A tibble: 1,598 x 2 ## Procedencia Peso ## &lt;chr&gt; &lt;dbl&gt; ## 1 La Rosita 204 ## 2 La Rosita 186 ## 3 La Rosita 182 ## 4 La Rosita 186 ## 5 La Rosita 186 ## 6 La Rosita 208 ## 7 La Rosita 170 ## 8 La Rosita 188 ## 9 La Rosita 172 ## 10 La Rosita 172 ## # ... with 1,588 more rows Para omitir algunas columnas en la seleccion se puede usar el - antes del nombre. # Selecciona columnas que empiezan con P select(terneros, -IDV, -starts_with(&quot;P&quot;)) ## # A tibble: 1,598 x 5 ## Sexo `Fecha Ingreso` Categoria Fecha ## &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;dttm&gt; ## 1 Macho 2017-07-20 00:00:00 Ternero 2017-04-06 00:00:00 ## 2 Macho 2017-07-20 00:00:00 Ternero 2017-04-06 00:00:00 ## 3 Macho 2017-07-21 00:00:00 Ternero 2017-04-06 00:00:00 ## 4 Macho 2017-07-20 00:00:00 Ternero 2017-04-06 00:00:00 ## 5 Macho 2017-07-24 00:00:00 Ternero 2017-04-06 00:00:00 ## 6 Macho 2017-07-24 00:00:00 Ternero 2017-04-06 00:00:00 ## 7 Macho 2017-07-21 00:00:00 Ternero 2017-04-06 00:00:00 ## 8 Macho 2017-07-24 00:00:00 Ternero 2017-04-06 00:00:00 ## 9 Macho 2017-07-21 00:00:00 Ternero 2017-04-06 00:00:00 ## 10 Macho 2017-07-24 00:00:00 Ternero 2017-04-06 00:00:00 ## # ... with 1,588 more rows, and 1 more variable: Hora &lt;dttm&gt; 3.4.2 Seleccionando observaciones Otra tarea muy frecuente es seleccionar casos o observaciones que cumplan con alguna condición. Esto se lleva a cabo con filter(). Se pueden usar los operadores booleanos ==, &gt;, &lt;, &gt;=, &lt;=, !=, %in%) para crear pruebas o condiciones lógicas. Para seleccionar los terneros de Los Corralitos: # Sin asignar filter(terneros, Procedencia == &#39;Los Corralitos&#39;) ## # A tibble: 575 x 8 ## IDV Procedencia Sexo `Fecha Ingreso` Categoria ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 PO15… Los Corral… Macho 2017-07-23 00:00:00 Ternero ## 2 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 3 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 4 PO15… Los Corral… Macho 2017-07-23 00:00:00 Ternero ## 5 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 6 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 7 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 8 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 9 PO15… Los Corral… Macho 2017-06-06 00:00:00 Ternero ## 10 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## # ... with 565 more rows, and 3 more variables: Fecha &lt;dttm&gt;, Hora &lt;dttm&gt;, ## # Peso &lt;dbl&gt; # Creando un nuevo set de datos corralitos &lt;- filter(terneros, Procedencia == &#39;Los Corralitos&#39;) La seleccion se puede hacer por más de una condicion. Por ejemplo, seleccionar los de Los Corralitos que pesen más de 200 kg: filter(terneros, Procedencia == &#39;Los Corralitos&#39;, Peso &gt; 200) ## # A tibble: 260 x 8 ## IDV Procedencia Sexo `Fecha Ingreso` Categoria ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 PO15… Los Corral… Macho 2017-07-23 00:00:00 Ternero ## 2 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 3 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 4 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 5 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 6 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 7 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 8 PO15… Los Corral… Macho 2017-07-23 00:00:00 Ternero ## 9 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 10 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## # ... with 250 more rows, and 3 more variables: Fecha &lt;dttm&gt;, Hora &lt;dttm&gt;, ## # Peso &lt;dbl&gt; filter() asume que cada condicion se debe cumplir en simultaneo para que la observación sea seleccionada. Esto equivale a utilizar el operador &amp; (Y). En caso de querer seleccionar aquellos registros que cumple una u otra condicion se usa el operador | (O). Poniendo ! delante de la condicion se invierte la selección. # Operador &amp; filter(terneros, Procedencia == &#39;Los Corralitos&#39; &amp; Peso &gt; 200) ## # A tibble: 260 x 8 ## IDV Procedencia Sexo `Fecha Ingreso` Categoria ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 PO15… Los Corral… Macho 2017-07-23 00:00:00 Ternero ## 2 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 3 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 4 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 5 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 6 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 7 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 8 PO15… Los Corral… Macho 2017-07-23 00:00:00 Ternero ## 9 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 10 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## # ... with 250 more rows, and 3 more variables: Fecha &lt;dttm&gt;, Hora &lt;dttm&gt;, ## # Peso &lt;dbl&gt; # Operador | filter(terneros, Procedencia == &#39;Los Corralitos&#39; | Peso &gt; 200) ## # A tibble: 779 x 8 ## IDV Procedencia Sexo `Fecha Ingreso` Categoria ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 NR04… La Rosita Macho 2017-07-20 00:00:00 Ternero ## 2 LH83… La Rosita Macho 2017-07-24 00:00:00 Ternero ## 3 IY73… La Rosita Macho 2017-07-22 00:00:00 Ternero ## 4 QW11… La Rosita Macho 2017-07-24 00:00:00 Ternero ## 5 LH83… La Rosita Macho 2017-07-20 00:00:00 Ternero ## 6 DS28… La Rosita Macho 2017-07-24 00:00:00 Ternero ## 7 TL69… La Rosita Macho 2017-07-20 00:00:00 Ternero ## 8 LH83… La Rosita Macho 2017-07-21 00:00:00 Ternero ## 9 IW75… La Rosita Macho 2017-07-24 00:00:00 Ternero ## 10 NO13… Las Glicin… Macho 2017-07-23 00:00:00 Ternero ## # ... with 769 more rows, and 3 more variables: Fecha &lt;dttm&gt;, Hora &lt;dttm&gt;, ## # Peso &lt;dbl&gt; Con el operador %in% se puede especificar un rango de valores que deben cumplir. Por ejemplo terneros de Los Corralitos, Las Glicinas y Don Alberto # Indicando cada nombre filter(terneros, Procedencia == &#39;Los Corralitos&#39;, Procedencia == &#39;Las Glicinas&#39;, Procedencia == &#39;Don Alberto&#39;) ## # A tibble: 0 x 8 ## # ... with 8 variables: IDV &lt;chr&gt;, Procedencia &lt;chr&gt;, Sexo &lt;chr&gt;, `Fecha ## # Ingreso` &lt;dttm&gt;, Categoria &lt;chr&gt;, Fecha &lt;dttm&gt;, Hora &lt;dttm&gt;, ## # Peso &lt;dbl&gt; # Más resumido con %in% filter(terneros, Procedencia %in% c(&#39;Los Corralitos&#39;, &#39;Las Glicinas&#39;, &#39;Don Alberto&#39;)) ## # A tibble: 1,138 x 8 ## IDV Procedencia Sexo `Fecha Ingreso` Categoria ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 SZ20… Las Glicin… Macho 2017-07-20 00:00:00 Ternero ## 2 SZ20… Las Glicin… Macho 2017-06-05 00:00:00 Ternero ## 3 SZ20… Las Glicin… Macho 2017-06-05 00:00:00 Ternero ## 4 SZ20… Las Glicin… Macho 2017-06-05 00:00:00 Ternero ## 5 GT54… Las Glicin… Macho 2017-07-21 00:00:00 Ternero ## 6 OQ15… Las Glicin… Macho 2017-07-21 00:00:00 Ternero ## 7 NO13… Las Glicin… Macho 2017-07-24 00:00:00 Ternero ## 8 SZ20… Las Glicin… Macho 2017-07-22 00:00:00 Ternero ## 9 OQ15… Las Glicin… Macho 2017-07-20 00:00:00 Ternero ## 10 NO13… Las Glicin… Macho 2017-07-20 00:00:00 Ternero ## # ... with 1,128 more rows, and 3 more variables: Fecha &lt;dttm&gt;, ## # Hora &lt;dttm&gt;, Peso &lt;dbl&gt; 3.4.3 Encadenando operaciones (operador %&gt;%) dplyr importa el operador %&gt;% de otro paquete llamado magrittr. Este operador permite encadenar operaciones realizadas con los verbos. De este modo no hay que ir creando tablas intermedias o anidar funciones. El operador traduce como luego y se le de izquierda a derecha y se puede. Ejemplo: Reportar los IDV y peso de los terneros con más de 250 kg. Esto implicaría seleccionar las columnas de interés y luego filtrar la tabla o vice versa. # Creando tablas intermedias terneros2 &lt;- select(terneros, IDV, Peso) terneros2 ## # A tibble: 1,598 x 2 ## IDV Peso ## &lt;chr&gt; &lt;dbl&gt; ## 1 NR047A202 204 ## 2 GN685B267 186 ## 3 AI101A751 182 ## 4 TM603C877 186 ## 5 TM420B797 186 ## 6 LH837F500 208 ## 7 NR047A217 170 ## 8 LH837F508 188 ## 9 GN685B256 172 ## 10 QW110A058 172 ## # ... with 1,588 more rows terneros2 &lt;- filter(terneros2, Peso &gt; 250) terneros2 ## # A tibble: 75 x 2 ## IDV Peso ## &lt;chr&gt; &lt;dbl&gt; ## 1 NO133A004 258 ## 2 OQ152A456 258 ## 3 NO133A006 256 ## 4 OQ152A553 256 ## 5 PO150A166 290 ## 6 PO150A674 256 ## 7 PO150A656 272 ## 8 NO133A045 264 ## 9 PO150A571 264 ## 10 PO150A686 262 ## # ... with 65 more rows # Anidando filter(select(terneros, IDV, Peso), Peso &gt; 250) ## # A tibble: 75 x 2 ## IDV Peso ## &lt;chr&gt; &lt;dbl&gt; ## 1 NO133A004 258 ## 2 OQ152A456 258 ## 3 NO133A006 256 ## 4 OQ152A553 256 ## 5 PO150A166 290 ## 6 PO150A674 256 ## 7 PO150A656 272 ## 8 NO133A045 264 ## 9 PO150A571 264 ## 10 PO150A686 262 ## # ... with 65 more rows # Usando %&gt;% terneros %&gt;% select(IDV, Peso) %&gt;% filter(Peso &gt; 250) ## # A tibble: 75 x 2 ## IDV Peso ## &lt;chr&gt; &lt;dbl&gt; ## 1 NO133A004 258 ## 2 OQ152A456 258 ## 3 NO133A006 256 ## 4 OQ152A553 256 ## 5 PO150A166 290 ## 6 PO150A674 256 ## 7 PO150A656 272 ## 8 NO133A045 264 ## 9 PO150A571 264 ## 10 PO150A686 262 ## # ... with 65 more rows Con %&gt;% se puede omitir el nombre de la tabla sobre la que se está trabajando (bonus: menos tipeo). La última opción se lee: _tomar la tabla terneros, luego seleccionar las columnas IDV y Peso, luego filtrar los terneros con pesos mayores a 250 kg. El operador de encadenamiento es muy útil cuando se encadenan muchas operaciones. 3.4.4 Ordenar las filas Para ordenar según algun criterio aplicado a las columnas se usa arrange(). Por ejemplo, continuar con lo anterior pero mostrar ordenadospor peso. # Ordenar de menor a mayor terneros %&gt;% select(IDV, Peso) %&gt;% filter(Peso &gt; 250) %&gt;% arrange(Peso) ## # A tibble: 75 x 2 ## IDV Peso ## &lt;chr&gt; &lt;dbl&gt; ## 1 PO150A546 252 ## 2 NS509H081 252 ## 3 PO15A710 252 ## 4 NO133A019 254 ## 5 PO150A784 254 ## 6 IA671B182 254 ## 7 IA671B176 254 ## 8 PO150A716 254 ## 9 NO133A006 256 ## 10 OQ152A553 256 ## # ... with 65 more rows Con decs(variable) se ordena de mayor a menor # Ordenar de mayor a menor terneros %&gt;% select(IDV, Peso) %&gt;% filter(Peso &gt; 250) %&gt;% arrange(desc(Peso)) ## # A tibble: 75 x 2 ## IDV Peso ## &lt;chr&gt; &lt;dbl&gt; ## 1 PO150A679 304 ## 2 IA671B041 294 ## 3 MM429A932 292 ## 4 PO150A166 290 ## 5 PO150A763 288 ## 6 IA671B106 288 ## 7 NS509G964 286 ## 8 PO150A821 284 ## 9 IA671B045 282 ## 10 NO133A000 280 ## # ... with 65 more rows 3.4.5 Crear o transformar columnas Para crear nuevas columnas aplicando funciones a otras, o bien para transformar columnas se usa mutate(). Se pueden modificar más de una columna a la vez. Por ejemplo, suponiendo que interesa obtener el logaritmo natura de los pesos o elevar los pesos al cuadrado. terneros %&gt;% mutate(log_peso = log(Peso), peso2 = Peso**2) %&gt;% select(Peso, log_peso, peso2) # para que se vea mejor el resultado ## # A tibble: 1,598 x 3 ## Peso log_peso peso2 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 204 5.32 41616 ## 2 186 5.23 34596 ## 3 182 5.20 33124 ## 4 186 5.23 34596 ## 5 186 5.23 34596 ## 6 208 5.34 43264 ## 7 170 5.14 28900 ## 8 188 5.24 35344 ## 9 172 5.15 29584 ## 10 172 5.15 29584 ## # ... with 1,588 more rows Esto no cambia el set de datos terneros ya que no se lo asignó a ningun objeto. Para sobreescribir o actualiza el set de datos terneros hay que asignarlo al mismo objeto. terneros &lt;- terneros %&gt;% mutate(log_peso = log(Peso), peso2 = Peso**2) Aclaración: Si se hubiese usado select() el set de datos terneros solamente contendría las columnas seleccionadas. Otro ejemplo más útil: calcular los z-scores de los peso (para ello se requiere calcular el promedio y desvio) y crear una columna que indique si es un outlier y luego reportar los que son outliers. terneros %&gt;% mutate(z = (Peso - mean(Peso))/sd(Peso), outlier = ifelse(abs(z) &gt; 3, &quot;si&quot;, &quot;no&quot;)) %&gt;% filter(outlier == &quot;si&quot;) %&gt;% select(IDV) ## # A tibble: 2 x 1 ## IDV ## &lt;chr&gt; ## 1 PO150A679 ## 2 IA671B041 3.4.6 Resmuir datos Mediante summarise() se pueden aplicar funciones para resumir en un solo valor los valores de las columnas. Las funciones a aplicar deben devolver un único valor, por ejemplo mean(). Si usamos summary() esto devolverá 6 valores y dará error. terneros %&gt;% summarise(media = mean(Peso), sd = sd(Peso), n = n(), suma = sum(Peso), procedencias = n_distinct(Procedencia)) ## # A tibble: 1 x 5 ## media sd n suma procedencias ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 183. 37.0 1598 291802 7 Nuevamente estos resultados pueden asignarse a otro objeto o bien encadenarse con otras operaciones. Otro ejemplo, obtener la cantidad de terneros de cada procedencia terneros %&gt;% group_by(Procedencia) %&gt;% count() ## # A tibble: 7 x 2 ## # Groups: Procedencia [7] ## Procedencia n ## &lt;chr&gt; &lt;int&gt; ## 1 Don Alberto 69 ## 2 La Alameda 201 ## 3 La Estrella 118 ## 4 La Rosita 98 ## 5 La Segunda 43 ## 6 Las Glicinas 494 ## 7 Los Corralitos 575 Otro ejemplo más, cantidad de terneros de cada procedencia separados en mayor o menor a 200 kg terneros %&gt;% group_by(Procedencia, Peso &gt; 200) %&gt;% count() ## # A tibble: 14 x 3 ## # Groups: Procedencia, Peso &gt; 200 [14] ## Procedencia `Peso &gt; 200` n ## &lt;chr&gt; &lt;lgl&gt; &lt;int&gt; ## 1 Don Alberto FALSE 49 ## 2 Don Alberto TRUE 20 ## 3 La Alameda FALSE 136 ## 4 La Alameda TRUE 65 ## 5 La Estrella FALSE 112 ## 6 La Estrella TRUE 6 ## 7 La Rosita FALSE 89 ## 8 La Rosita TRUE 9 ## 9 La Segunda FALSE 5 ## 10 La Segunda TRUE 38 ## 11 Las Glicinas FALSE 428 ## 12 Las Glicinas TRUE 66 ## 13 Los Corralitos FALSE 315 ## 14 Los Corralitos TRUE 260 3.4.7 Agrupar (último pero no menos importante) El verbo group_by() es muy útil para aplicar operaciones en subgrupos y presentar todo junto (split-apply-combine). Lo que hace es indicar que en el data.frame hay una o más variables que conforman los grupos. Luego cada operación se aplica a esos subgrupos. Ejemplo: calcular media, desvio, n y suma para cada procedencia. terneros %&gt;% group_by(Procedencia) %&gt;% summarise(media = mean(Peso), sd = sd(Peso), n = n(), suma = sum(Peso)) ## # A tibble: 7 x 5 ## Procedencia media sd n suma ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Don Alberto 179. 26.9 69 12354 ## 2 La Alameda 190. 39.5 201 38192 ## 3 La Estrella 179. 14.2 118 21138 ## 4 La Rosita 180. 17.4 98 17620 ## 5 La Segunda 229. 24.8 43 9868 ## 6 Las Glicinas 160. 33.7 494 79254 ## 7 Los Corralitos 197. 35.2 575 113376 3.4.8 Muestrear El verbo sample_n() and sample_frac() son útiles para tomar muestras aleatorias (con o sin reposición) de un conjunto de observaciones. También se puede hacer por subgrupo! # Una muestra de 50 novillos muestra50 &lt;- terneros %&gt;% sample_n(50) muestra50 ## # A tibble: 50 x 10 ## IDV Procedencia Sexo `Fecha Ingreso` Categoria ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 QX67… La Estrella Macho 2017-07-21 00:00:00 Ternero ## 2 PO15… Los Corral… Macho 2017-07-21 00:00:00 Ternero ## 3 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 4 GH73… Don Alberto Macho 2017-06-16 00:00:00 Ternero ## 5 NS50… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 6 NS50… Los Corral… Macho 2017-07-21 00:00:00 Ternero ## 7 GT54… Las Glicin… Macho 2017-06-05 00:00:00 Ternero ## 8 GN68… La Rosita Macho 2017-07-24 00:00:00 Ternero ## 9 PO15… Los Corral… Macho 2017-07-22 00:00:00 Ternero ## 10 NS50… Los Corral… Macho 2017-07-21 00:00:00 Ternero ## # ... with 40 more rows, and 5 more variables: Fecha &lt;dttm&gt;, Hora &lt;dttm&gt;, ## # Peso &lt;dbl&gt;, log_peso &lt;dbl&gt;, peso2 &lt;dbl&gt; # Una muestra de 10 novillos de cada procedencia muestra_procedencia &lt;- terneros %&gt;% group_by(Procedencia) %&gt;% sample_n(10) muestra_procedencia ## # A tibble: 70 x 10 ## # Groups: Procedencia [7] ## IDV Procedencia Sexo `Fecha Ingreso` Categoria ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 GH73… Don Alberto Macho 2017-06-16 00:00:00 Ternero ## 2 GH73… Don Alberto Macho 2017-07-21 00:00:00 Ternero ## 3 GH37… Don Alberto Macho 2017-06-16 00:00:00 Ternero ## 4 GH73… Don Alberto Macho 2017-07-24 00:00:00 Ternero ## 5 GH73… Don Alberto Macho 2017-07-24 00:00:00 Ternero ## 6 GH73… Don Alberto Macho 2017-06-16 00:00:00 Ternero ## 7 GH73… Don Alberto Macho 2017-06-16 00:00:00 Ternero ## 8 GH73… Don Alberto Macho 2017-06-16 00:00:00 Ternero ## 9 GH73… Don Alberto Macho 2017-07-24 00:00:00 Ternero ## 10 GH73… Don Alberto Macho 2017-06-16 00:00:00 Ternero ## # ... with 60 more rows, and 5 more variables: Fecha &lt;dttm&gt;, Hora &lt;dttm&gt;, ## # Peso &lt;dbl&gt;, log_peso &lt;dbl&gt;, peso2 &lt;dbl&gt; "],
["introduccion-a-ggplot2.html", "Capítulo 4 Introducción a ggplot2 4.1 Sistemas de gráficos en R 4.2 ¿Cómo conseguir ggplot2? 4.3 Partes básicas de un gráfico 4.4 Todo en un solo paso", " Capítulo 4 Introducción a ggplot2 4.1 Sistemas de gráficos en R R cuenta con tres sistemas para graficar: El básico o base plot system, que viene por defecto y tiene funciones para hacer gráficos simples plot() y otras (hist(), barplot(), boxplot(), etc). Usa un enfoque lienzo y lapiz donde cada capa se tiene que ir agregando una por una. El para gráficos más complejos (con subgrupos o multipanel) requiere programar más. Una desventaja es la sintaxis poco consistente. El paquete lattice desarrollado por Deepayan Sarkar, que implementa graficos tipo trellis (multipanel). Al contraro de el paquete base, lattice tiene un sintaxis más coherente y en vez de tener un enfoque lienzo y lápiz, todos los componentes del gráfico se declaran en una función. muy conveniente para graficos condicionales pero complicada para combinar gráficos o hacer ajustes finos. El paquete ggplot2, desarrollado por Hadley Wickham, está basado en la filosofía Gramática de gráficos (grammar of graphics). Combina los dos enfoques: lienzo-lápiz y función. Uno provee los datos, indica que variables asignar a las estéticas (ejes, escalas, colores, símbolos) y tipo de gráfico hacer y ggplot2 se encarga del resto. Puede ir agregando capas. Es muy potente para la exploración y visualización de datos en formato de tabla con filas (observaciones) y columnas (variables). 4.2 ¿Cómo conseguir ggplot2? Para instalar por primera vez en la computadora: # Solo install.packages(&quot;ggplot2&quot;) # O junto con la familia tidyverse install.packages(&quot;tidyverse&quot;) Lo anterior se debe realizar por única vez si el paquete no está previamente instalado en la máquina. Para usar las funciones en una sesion de trabajo hay que cargarlo con library(): # Solo library(&quot;ggplot2&quot;) # O junto con la familia tidyverse library(&quot;tidyverse&quot;) R va a avisarnos en la consola que esta enmascarando (reemplazando) algunas funciones que ya estaban en el entorno, o bien el paquete nos devuelve algun mensaje. A menos que diga Error ..., eso está bien. 4.3 Partes básicas de un gráfico Si bien es dificil resumir como trabaja ggplot2 en un párrafo, la estrategia para graficar puede resumirse así: Se comienza con ggplot() para suministrar el set de datos y se definen. Se definen los parámetros estéticos, i.e. que variables van a los ejes, colores, escales, etc., con la aes(). En este caso el set de datos es terneros y queremos hacer un histograma. En el eje x vamos a indicar el Peso y en relleno vamos a indicar la Procedencia library(readxl) terneros &lt;- read_excel(&quot;./data/pesada_terneros.xlsx&quot;) # Iniciar objeto p &lt;- ggplot(terneros, aes(x = Peso, fill = Procedencia)) p Luego agregar las capas o layers con las geometrías geom_* que uno quiere graficar (tipo de gráfico) En este caso como es un histograma entonces geom_histogram() es la geometría indicada. # Iniciar objeto p &lt;- p + geom_histogram() p ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Si es necesario ajustar la escala de colores con scales_. En este caso vamos a probar un gradiente de colores con scale_color_brewer(). # Iniciar objeto p &lt;- p + scale_fill_brewer(&quot;RdYlGn&quot;, type = &quot;div&quot;) p ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Suponiendo que queremos dividir en paneles se puede usar factes_wrap(). En este caso agregamos Fecha como facets. p &lt;- p + facet_wrap(~ Fecha) p ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Se puede modificar los ejes de coordenadas con las funciones de tipo coords_(). Por ejemplo, para ilustrar vamos a rotar el gráfico. p &lt;- p + coord_flip() p ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Por último se pueden modificar los títulos de los ejes y otros detalles como la leyenda p &lt;- p + labs(x = &quot;Peso (kg)&quot;, y = &quot;frecuencia&quot;) p ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. p &lt;- p + guides(fill = guide_legend(title = &quot;Procedencia&quot;)) p ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 4.4 Todo en un solo paso Anteriormente fuimos agregando partes al gráfico. Una característica de ggplot2 es que mediante + se pueden ir combinando los comandos. p &lt;- ggplot(terneros, aes(x = Peso, fill = Procedencia)) + geom_histogram() + scale_fill_brewer(&quot;RdYlGn&quot;, type = &quot;div&quot;) + facet_wrap(~ Fecha) + coord_flip() + labs(x = &quot;Peso (kg)&quot;, y = &quot;frecuencia&quot;) + guides(fill = guide_legend(title = &quot;Procedencia&quot;)) p ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. O más avanzado, agregando estadísticas de resumen calculadas # Agregar linea representando medias por procedencia y fecha library(dplyr) med &lt;- terneros %&gt;% group_by(Procedencia, Fecha) %&gt;% summarise(media = mean(Peso)) med ## # A tibble: 12 x 3 ## # Groups: Procedencia [?] ## Procedencia Fecha media ## &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; ## 1 Don Alberto 2017-04-20 00:00:00 179. ## 2 La Alameda 2017-04-18 00:00:00 190. ## 3 La Estrella 2017-04-12 00:00:00 179. ## 4 La Rosita 2017-04-06 00:00:00 180. ## 5 La Rosita 2017-04-10 00:00:00 182 ## 6 La Segunda 2017-04-20 00:00:00 229. ## 7 Las Glicinas 2017-04-09 00:00:00 163. ## 8 Las Glicinas 2017-04-10 00:00:00 159. ## 9 Los Corralitos 2017-04-10 00:00:00 198. ## 10 Los Corralitos 2017-04-11 00:00:00 195. ## 11 Los Corralitos 2017-04-12 00:00:00 200. ## 12 Los Corralitos 2017-04-20 00:00:00 182 # Combinar en el grafico (coord_cartesian para que vuelva a horizontal) p + coord_cartesian() + geom_vline(data = med, aes(xintercept = media)) ## Coordinate system already present. Adding new coordinate system, which will replace the existing one. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. "],
["revision-de-estadistica-basica.html", "Capítulo 5 Revisión de estadística básica 5.1 ¿Qué es la estadística? 5.2 Variables 5.3 Población y muestra 5.4 Estadística descriptiva 5.5 distribuciones (directamente la normal y TCL) 5.6 IC 5.7 Test hipotesis", " Capítulo 5 Revisión de estadística básica En este capítulo se revisan algunos conceptos y términos estadísticos básicos que serán necesarios para el entendimiento del diseño y análisis estadístico de datos provenientes de estudios observacionales y experimentales. Se repasarán: Concepto y utilidad de la Estadística Tipos de datos y variables Población y muestra Estadística descriptiva Distribuciones de probabilidades Inferencia estadística 5.1 ¿Qué es la estadística? Existen muchas definiciones de Estadística, tantas como libros se consulten. Según Ott y Longnecker (2016), la estadística es la ciencia del diseño de estudios o experimentos, recolección de datos y modelado/análisis de los mismos para la toma de decisiones o descubrimiento de nuevo conocimiento cuando la información disponible es limitada y variable. En resumen, la estadística es la ciencia del aprendizaje a partir de los datos (learning from data) y está muy emparentada con la aplicación del método científico. Según este enfoque, el proceso de aprender a partir de los datos implica las siguientes etapas: Definición del problema de estudio. Todo estudio o investigación surge de una pregunta de investigación. Un interrogante sobre el objeto de estudio que no ha sido respondido con la información existente y por lo tanto motiva la búsqueda de más información (nuevos experimentos o muestreos) para verificar las posibles respuestas o modelos que permiten representar la realidad en estudio (hipótesis). De este modo, a partir de la identificación del problema o pregunta de estudio se pone de relieve cual es la información que se debe recolectar, cuales son las variables que intervienen en el proceso, cuales controlar y cuales modificar, que tipo de datos se van a trabajar, etc. Recolección de los datos. Una vez definido el problema de estudio, es necesario determinar de que manera se colectará la información relevante. Para ello se diseñan muestreos o experimentos que permitan de manera costo efectiva, obtener la mayor cantidad de información empleando el menor tiempo y dinero para logarar responder de manera precisa la pregunta que originó el estudio. La estadísitca brinda herramientas para el diseño de muestreos y experimentos. Resumen de la información. Una vez recolectados los datos deben ser organizados y resumidos de manera numérica y gráfica para facilitar su exploración y e reconocimiento de las principales características o patrones de los mismos (tendencias, variabilidad, anomalías, etc.). La estadística brinda las herramientas necesarias para la descripción de la información proveniente de muestreos o experimentos. Análisis, interpretación y comunicación de los resultados. Los datos provenientes de muestreos o experimentos son una pequeña parte (muestra) de un conjunto más grande (población) el cual es imposible observar en su totalidad. Es por esto que lo observado en un experimento debe ser analizado aplicando técnicas de inferencia estadística para poder interpretar los resultados y realizar generalizaciones. La estadística inferencial brinda herramientas para estimar y valorar los modelos definidos en la Etapa 1 a la luz de los datos recolectados en la Etapa 2 considerando la variabilidad del proceso que los generó. 5.2 Variables Las variables son características de interés que se observan o miden en la unidad de observación más pequeña. Al contrario que las constantes, las variables toman diferentes valores de una individuo a otro, i.e. varían. Las variables se pueden clasificar según el tipo de datos que contienen y la información que contienen. 5.2.1 Tipos de datos Según el tipo de datos, las variables son: Cualitativas: que expresan una cualidad o atributo no numéricos. e.g. color de pelo, sexo, estatus sanitario, estado fenológico. Cuantitativas: que expresan una cantidad discreta (e.g. número de ramas, número de insectos) o contínua (e.g. peso de granos, contenido de MO del suelo). 5.2.2 Escala de medición Según la cantidad de información que contienen (de menor a mayor), las variables se clasifican según su escala de medición en: Nominal: cualitativa (el número de identificación o RP de una vaca) Ordinal: cualitativa con orden (posición en el ranking del control lechero) De intervalo: cuantitativa, orden y distancias (fecha del último parto) De razón: cuantitativa, orden, distancia y proporciones (días desde el último parto) La escala de medición determina la cantidad de información que tienen y que métodos se pueden aplicar 5.3 Población y muestra Desde el punto de vista estadístico, una Población es la totalidad de las unidades u observaciones individuales sobre la cuales se quiere realizar inferencia. Está definida en el tiempo y espacio y se caracteriza por sus parámetros, i.e. la media \\(\\mu\\). Las poblaciones pueden ser finitas, i.e. se puede contar la totalidad de elementos que contienen, o infinita, i.e. no se pueden contar. En la mayoría de los casos, los métodos estadísticos asumen que la población es infinita o finitas pero tan grandes que a los efectos prácticos puede asumirse que son infinitas. Por su parte, una muestra es un subconjunto de individuos u observaciones individuales elegidas de la población. Las muestras son finitas y se caracterizan por sus estadísticos que son la versión muestral de los parámetros poblacionales, i.e. la media muestral \\(\\bar{y}\\). Si el procedimiento para obtener la muestra es aleatorio entonces es razonable suponer que la muestra tendrá las mismas propiedades que la población y por lo tanto se puede usar para hacer inferencia estadística sobre la poblaicón. En el siguiente gráfico resume el concepto general de la inferencia estadística. Suponga que se quiere conocer el valor medio de las alturas (parámetro) en m de plantas de maíz de un lote de 50 has, i.e. \\(\\mu = ?\\). El conjunto más grande denominado Población contiene las alturas en m de todas las plantas de maiz del lote en estudio y sobre el que se quiere hacer la inferencia (los \\(\\dots\\) indican que en el gráfico no están representados todos los valores). Cada planta es una unidad de muestreo porque es elegida individualmente, y una unidad observacional porque a cada planta se le realiza una observación (la altura). Aquellas alturas en rojo corresponden a las 6 plantas seleccionadas mediante un muestreo aleatorio para componer la muestra (\\(n = 6\\)). La altura promedio de las plantas de la muestra (estadístico) es \\(\\bar{y} = 1.728\\). Dado que el muestreo fue realizado al azar, el estadístico calculado a partir de la muestra brinda información sobre lo que pasa a nivel poblacional (\\(\\mu\\)). A su vez, la aleatoriedad del muestreo determina que si se repitiera el muestreo de 6 unidades muchas veces, el estadístico muestral tomaría distintos valores ya que es una variable aleatoria. Finalmente, a partir de la distribución de probabilidades asociada a los posibles valores que tomaría el estadístico muestral es posible realizar la inferencia sobre el parámetro poblacional incorporando la variabilidad del muestreo. include_graphics(&quot;images/poblacion_muestra_venn.svg&quot;, auto_pdf = T) Figure 5.1: Esquema del proceso de inferencia estadística 5.4 Estadística descriptiva Conjunto de técnicas y métodos para organizar, resumir y describir los datos. 5.4.1 Gráficos Histogramas Gráficos de barras Box-plots Dispersión 5.4.2 Medidas de resumen Tendencia central: media, mediana, modo Dispersión: varianza (desvío), rango, rango intercuartílico Posición: percentiles Forma: sesgo o asimetría y curtosis 5.5 distribuciones (directamente la normal y TCL) 5.6 IC 5.7 Test hipotesis "]
]
